
#include "face.h"
#include "vertex.h"
#include <assert.h>


// ============================================================================
// ----------------------------------------------------------------------------
// ============================================================================
namespace QBMS
{
// ----------------------------------------------------------------------------
Face::Face() :
	v0_(0),
	v1_(0),
	v2_(0)
{
}
// ----------------------------------------------------------------------------
Face::Face(Vertex* parV0, Vertex* parV1, Vertex* parV2) :
	v0_(parV0),
	v1_(parV1),
	v2_(parV2)
{
	assert(v0_);
	assert(v1_);
	assert(v2_);
}
// ----------------------------------------------------------------------------
Face::~Face()
{
}
// ----------------------------------------------------------------------------
void Face::RemoveOnRelatedVertex()
{
	assert(IsDegenerated());

	if (v0_ == v1_)
	{
		if (v0_ != v2_)
			v2_->RemoveIncidentFace(this);
	}
	else
		v1_->RemoveIncidentFace(this);

	v0_->RemoveIncidentFace(this);
}
// ----------------------------------------------------------------------------
bool Face::IsDegenerated() const
{
	return ((v0_ == v1_) || (v0_ == v2_) || (v1_ == v2_)); // less than 3 vertices
}
// ----------------------------------------------------------------------------
bool Face::HasZeroAreaSurface() const
{
	Com::Vec4 edge1(v0_->Pos(), v1_->Pos());
	Com::Vec4 edge2(v0_->Pos(), v2_->Pos());
	Com::Vec4 normal = Com::Vec4::CrossProduct(edge1, edge2);

	return (normal.Length() <= 0.0);
}
// ----------------------------------------------------------------------------
}
// ============================================================================
// ----------------------------------------------------------------------------
// ============================================================================
